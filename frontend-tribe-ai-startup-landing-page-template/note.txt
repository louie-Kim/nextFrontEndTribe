Webpack ???

------------------------------------------------------------------

타입스크립트

// T 매개변수 value의 타입을 결정 하는 '제네릭'
// <T>  어떤 타입이든 받을 수 있는 제네릭 함수
function identity<T>(value: T): T {
  return value;
}


// T : number  , value : 10, : T 반환타입 : number 
console.log(identity<number>(10));   // 10
console.log(identity<string>("hi")); // "hi"
console.log(identity<boolean>(true)); // true

-------------------------------------------------------------------

자바스크립트 vs 타입스크립트

// boolean 타입만 받는 함수로 정해짐
function identity(value: boolean): boolean {
  return value;
}


// 자바스크립트 안에서 타입검사 해야 됨.
function identity(value) {
  if (typeof value !== "boolean") {
    throw new Error("value must be a boolean");
  }
  return value;
}

console.log(identity(true));  // ✅ true
console.log(identity(false)); // ✅ false
console.log(identity(10));    // ❌ Error: value must be a boolean


------------------------------------------------------------------------


/\.svg$/i

\. : .
$  : 문자열의 끝
i  : 대소문자 구분 없음 (svg, SVG, sVg 등도 가능)


------------------------------------------------------------------------

import logoUrl from "@/assets/logo.svg?url";
console.log(logoUrl); // 출력 예: "/_next/static/media/logo.abcdef.svg"

logoUrl은 파일의 URL 경로가 됨

<img src={logoUrl} alt="Logo" />



import Logo from "@/assets/logo.svg";
console.log(Logo); // 출력: React 컴포넌트

<Logo width={100} height={100} />

--------------------------------------------------------------------------

 기본적으로 Next.js(Webpack)는 
 .svg를 next-image-loader 통해 
 URL로 처리 .svg?url

--------------------------------------------------------------------------

twMerge 

const className = twMerge("bg-red-500 bg-blue-500 text-white", "bg-green-500");

console.log(className); // "bg-green-500 text-white" 
중복된 스타일을 자동으로 정리하고, '마지막으로 선언된 스타일'을 우선 적용

const isDarkMode = true;

const className = twMerge(
  "bg-white text-black",
  isDarkMode && "bg-gray-900 text-white"
);

console.log(className); // "bg-gray-900 text-white"


--------------------------------------------------------------------------

🔹 import한 이미지의 처리 과정
1️⃣ 개발자가 import starsBg from "@/assets/stars.png"; 사용
2️⃣ Webpack이 이미지 파일을 해시 기반 파일명으로 변환 (stars.0c47b3bb.png) 
3️⃣ 변환된 이미지가 /_next/static/media/ 경로에 저장됨
4️⃣ import한 객체에서 .src를 사용하여 최적화된 경로로 접근
5️⃣ JSX에서 backgroundImage 또는 <img> 태그에 적용 가능


absolute는 가장 가까운 relative 부모를 기준으로 배치


--------------------------------------------------------------------------
rgb(225,225,225, 1) 투명도 100% -> 0.1:10%  ,  0.5:50%

--------------------------------------------------------------------------

<div className="absolute h-3 w-3 left-0 bg-white rounded-full top-1/2 -translate-x-1/2 -translate-y-1/2"></div>

✔️ -translate-x-1/2 → 너비(w-3)의 50% 만큼(6px) 왼쪽으로 이동
✔️ -translate-y-1/2 → 높이(h-3)의 50% 만큼(6px) 위쪽으로 이동
✔️ 결과적으로 부모의 정확한 가운데(가로 + 세로 중앙)에 배치됨 ✅



---------------------------------------------------------------------------

  Hero.tsx
  {/* 배경 이미지 Iamge컴포넌트 사용 */}
    {/* <Image 
    src={starsBg}
    alt="Background Stars"
    layout="fill" // 부모 요소를 꽉 채움
    objectFit="cover" // 이미지 줌인 (화질이 깨질수 있음) <-> contain
    quality={100} // 고품질 이미지 렌더링
    className="z-[-1]" // 배경으로 보내기
    /> */}



---------------------------------------------------------------------------

✅ inset-0이란?

🔹 top: 0; right: 0; bottom: 0; left: 0; 와 같은 역할을 합니다.

즉, 요소가 부모 컨테이너를 기준으로 네 방향(상, 우, 하, 좌) 모두 0으로 설정되어,
해당 요소가 부모 요소를 꽉 채우도록 만듭니다.

---------------------------------------------------------------------------

flex를 사용할 때와 flex flex-col을 사용할 때, justify-center와 items-center의 정렬 방향이 바뀝니다.



✔️ 음수 마진 값이 커질수록 요소가 더 바깥쪽으로 확장되고, 다른 요소 위로 겹칠 수도 있음.
✔️ 양수 마진 값이 커질수록 요소가 더 안쪽으로 밀려나며, 주변 요소와의 간격이 커짐.


----------------------------------------------------------------------------

next.js